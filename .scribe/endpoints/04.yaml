name: Users
description: |-

  API endpoints for creating user and getting user info
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/all-students
    metadata:
      title: 'Get all students'' info'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":90,"username":"cynthia.wyman","full_name":"Tina Ziemann","email":"cynthia.wyman@test.com","gender":"female","date_of_birth":"1977-07-05","roles":[]},{"id":91,"username":"kautzer.glenda","full_name":"Margarita Vandervort","email":"kautzer.glenda@test.com","gender":"female","date_of_birth":"2004-06-11","roles":[]}]}'
        headers: []
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/v1/all-instructors
    metadata:
      title: 'Get all instructors'' info'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":92,"username":"fernando.brekke","full_name":"Yessenia Miller","email":"fernando.brekke@test.com","gender":"female","date_of_birth":"1982-08-16","roles":[]},{"id":93,"username":"radams","full_name":"Sincere Homenick","email":"radams@test.com","gender":"male","date_of_birth":"2015-01-19","roles":[]}]}'
        headers: []
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/v1/my-info
    metadata:
      title: 'Get the logged in user''s info'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":89,"username":"corkery.keon","full_name":"Gay Bashirian","email":"corkery.keon@test.com","gender":"female","date_of_birth":"2007-06-29","roles":[]}}'
        headers: []
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      title: 'Get a list of all users'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":94,"username":"daron.hettinger","full_name":"Avery Hamill","email":"daron.hettinger@test.com","gender":"male","date_of_birth":"1997-08-17","roles":[]},{"id":95,"username":"lisette.kovacek","full_name":"Merlin Johnson","email":"lisette.kovacek@test.com","gender":"female","date_of_birth":"2001-03-26","roles":[]}]}'
        headers: []
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      title: 'Create a new user'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      username:
        name: username
        description: 'A unique username'
        required: true
        example: et
        type: string
      email:
        name: email
        description: 'A unique email address'
        required: true
        example: aut
        type: string
      first_name:
        name: first_name
        description: ''
        required: true
        example: aut
        type: string
      last_name:
        name: last_name
        description: ''
        required: true
        example: excepturi
        type: string
      gender:
        name: gender
        description: ''
        required: true
        example: quia
        type: string
      date_of_birth:
        name: date_of_birth
        description: ''
        required: true
        example: '2020-12-01'
        type: string
      role_ids:
        name: role_ids
        description: 'The role ids of the user'
        required: true
        example:
          - 8
          - 16
        type: 'integer[]'
    responses:
      -
        status: 201
        content: |-
          {
           "message": "Successfully created user!",
           "credentials": {
               "email": "user@test.com",
               "password": "12345678"
           }
          }
        headers: []
        description: '201'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{id}'
    metadata:
      title: 'Get the specified user.'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user'
        required: true
        example: 20
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":96,"username":"krystal.kunze","full_name":"Belle Hintz","email":"krystal.kunze@test.com","gender":"female","date_of_birth":"1984-05-08","roles":[]}}'
        headers: []
        description: null
    responseFields: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/users/{id}'
    metadata:
      title: 'Update the specified user'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user'
        required: true
        example: 17
        type: integer
    queryParameters: []
    bodyParameters:
      username:
        name: username
        description: 'A unique username'
        required: true
        example: eveniet
        type: string
      email:
        name: email
        description: 'A unique email address'
        required: true
        example: optio
        type: string
      first_name:
        name: first_name
        description: ''
        required: true
        example: accusamus
        type: string
      last_name:
        name: last_name
        description: ''
        required: true
        example: vel
        type: string
      gender:
        name: gender
        description: ''
        required: true
        example: perspiciatis
        type: string
      date_of_birth:
        name: date_of_birth
        description: ''
        required: true
        example: '2020-12-01'
        type: string
      role_ids:
        name: role_ids
        description: 'The role ids of the user'
        required: true
        example:
          - 1
          - 9
        type: 'integer[]'
    responses:
      -
        status: 200
        content: |-
          {
           "message": "Successfully updated user!"
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{id}'
    metadata:
      title: 'Delete the specified user'
      description: ''
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user'
        required: true
        example: 20
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "message": "Successfully deleted user!"
          }
        headers: []
        description: '200'
    responseFields: []
